---
apiVersion: v1
kind: ServiceAccount
metadata:
  labels:
    app: word-count
  name: word-count
  annotations:
    {}
---
apiVersion: v1
kind: ConfigMap
metadata:
  labels:
    app: word-count
  name: word-count
data:
  flask.cfg: |
    APPLICATION_ROOT = '/'
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  labels:
    app: word-count
  name: word-count
rules:
  - apiGroups:
      - ""
      - "extensions"
    resources:
      - "configmaps"
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  labels:
    app: word-count
  name: word-count
subjects:
  - kind: ServiceAccount
    name: word-count
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: word-count
---
apiVersion: v1
kind: Service
metadata:
  labels:
    app: word-count
  name: word-count
spec:
  ports:
    - name: http
      port: 80
      protocol: TCP
      targetPort: 5000
    - name: monitor-http
      port: 8080
      protocol: TCP
      targetPort: 8080
  selector:
    app: word-count
  type: "ClusterIP"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app: word-count
  name: word-count
spec:
  selector:
    matchLabels:
      app: word-count
  replicas: 1
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: word-count
    spec:
      serviceAccountName: word-count
      containers:
        - name: word-count
          image: "word-count:0.0.3"
          imagePullPolicy: "IfNotPresent"
          args:
            ["--wsgi-file","server.py", "--callable", "app"]
          env:
            #FLASK_RUN_HOST
            - name: UWSGI_SOCKET 
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: FILE_FORM_FIELD
              value: data
          ports:
            - containerPort: 5000
              name: main
            - containerPort: 8080
              name: monitoring
          readinessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 30
            periodSeconds: 5
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          livenessProbe:
            httpGet:
              path: /
              port: 5000
            initialDelaySeconds: 30
            periodSeconds: 15
            timeoutSeconds: 30
            failureThreshold: 3
            successThreshold: 1
          resources:
            requests:
              cpu: "50m"
              memory: "128Mi"
            limits:
              cpu: "768m"
              memory: "1024Mi"
            
          volumeMounts:
            - name: config-volume
              mountPath: /etc/config

      securityContext:
        fsGroup: 65534
        runAsGroup: 65534
        runAsNonRoot: true
        runAsUser: 65534
      terminationGracePeriodSeconds: 300
      volumes:
        - name: config-volume
          configMap:
            name: word-count
